from aiogram import types
from aiogram.dispatcher import FSMContext
from bot.keyboards import create_anime_keyboard, create_episodes_keyboard

def register_handlers(dp, db):
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp.register_message_handler(start_command, commands=['start'])
    dp.register_message_handler(search_command, commands=['search'])
    dp.register_callback_query_handler(show_anime_details, lambda c: c.data.startswith('anime_'))
    dp.register_callback_query_handler(show_episode, lambda c: c.data.startswith('ep_'))

async def start_command(message: types.Message):
    await message.answer(
        "üç• –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∏–º–µ —Å –æ–∑–≤—É—á–∫–æ–π –æ—Ç VexeraDubbing.\n\n"
        "üîç –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∞–Ω–∏–º–µ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É: /search <–Ω–∞–∑–≤–∞–Ω–∏–µ>\n"
        "üë®‚Äçüíª –ê–¥–º–∏–Ω: @–≤–∞—à_–Ω–∏–∫"
    )

async def search_command(message: types.Message):
    query = message.get_args().strip()
    if not query:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã\n–ü—Ä–∏–º–µ—Ä: /search –ù–∞—Ä—É—Ç–æ")
        return
    
    if len(query) < 3:
        await message.answer("üîé –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
        return
    
    results = db.search_anime(query)
    
    if not results:
        await message.answer("üò¢ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å")
        return
    
    for anime in results[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–º 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        keyboard = create_anime_keyboard(anime['id'])
        caption = f"üé¨ <b>{anime['title']}</b>\nüîä –û–∑–≤—É—á–∫–∞: {anime['voiceover']}"
        
        if anime.get('poster_url'):
            await message.answer_photo(
                anime['poster_url'],
                caption=caption,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            await message.answer(
                caption,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

async def show_anime_details(callback_query: types.CallbackQuery):
    anime_id = int(callback_query.data.split('_')[1])
    anime = db.get_anime_by_id(anime_id)
    
    if not anime:
        await callback_query.answer("‚ùå –ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    episodes = db.get_episodes(anime_id)
    
    if not episodes:
        await callback_query.answer("üò¢ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–∏–π")
        return
    
    message_text = (
        f"üé¨ <b>{anime['title']}</b>\n\n"
        f"üìù <i>{anime['description'][:250]}...</i>\n\n"
        f"üîä –û–∑–≤—É—á–∫–∞: {anime['voiceover']}\n"
        f"üì∫ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–∏–∏:"
    )
    
    keyboard = create_episodes_keyboard(anime_id, episodes)
    
    if anime.get('poster_url'):
        await callback_query.message.answer_photo(
            anime['poster_url'],
            caption=message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    else:
        await callback_query.message.answer(
            message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    
    await callback_query.answer()

async def show_episode(callback_query: types.CallbackQuery):
    _, anime_id, episode_number = callback_query.data.split('_')
    anime_id = int(anime_id)
    episode_number = int(episode_number)
    
    episode_url = db.get_episode_url(anime_id, episode_number)
    
    if not episode_url:
        await callback_query.answer("‚ùå –°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(
        "‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å –≤ VK", 
        url=episode_url
    ))
    
    await callback_query.message.answer(
        f"üé• –°–µ—Ä–∏—è {episode_number} –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É!\n"
        "üì± –í–∏–¥–µ–æ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ VK",
        reply_markup=keyboard
    )
    
    await callback_query.answer()
